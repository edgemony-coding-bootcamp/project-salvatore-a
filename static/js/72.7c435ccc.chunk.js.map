{"version":3,"file":"static/js/72.7c435ccc.chunk.js","mappings":"2NACA,EAA6B,+BAA7B,EAAqF,2C,SCArF,MCKe,YAA4C,EAAtBA,SAAuB,IAAbC,EAAY,EAAZA,SAC7C,GAA4BC,EAAAA,EAAAA,UAAS,CACnCC,OAAQ,gEADV,eAAOC,EAAP,KAAeC,EAAf,KAGMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAiCC,EAAAA,EAAAA,KAAzBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,eAEfC,EAAAA,EAAAA,YAAU,WACRD,MAEC,IAEH,IAAME,EAAiB,SAACC,GACtB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MAEvBX,GAAU,SAACY,GAAD,eAAC,UAAeA,GAAhB,cAAuBH,EAAOE,QAQpCE,EAAW,yCAAG,WAAOd,EAAQe,GAAf,mFACE,WAAhBA,EADc,0CAGQC,MACpB,+CACA,CACEC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUrB,KAVX,cAGRsB,EAHQ,gBAaSA,EAAQC,OAbjB,UAaRC,EAbQ,OAcS,MAAnBF,EAAQG,OAdE,uBAeN,IAAIC,MAAMF,GAfJ,QAiBZG,aAAaC,QAAQ,kBAAmBJ,EAASK,aACjDF,aAAaC,QAAQ,cAAeJ,EAASM,KAAKC,IAClD7B,EAAS,WAnBG,0DAsBd8B,MAAM,EAAD,IAtBS,iCAyBVC,EAAoB5B,EAAM6B,QAC9B,SAACJ,GAAD,OAAUA,EAAKK,QAAUnC,EAAOmC,UAEZC,QACpBT,aAAaC,QAAQ,cAAeK,EAAkB,GAAGF,IACzD7B,EAAS,YAET8B,MAAM,wCAhCQ,0DAAH,wDAqCjB,OACE,kBACEK,aAAa,QACbC,SA7Ce,SAAC7B,GAClBA,EAAE8B,iBACFzB,EAAYd,EAAQH,IA4ClB2C,UAAWC,EAHb,UAKgB,WAAb5C,GACC,iCACE,iBAAK2C,UAAWC,EAAhB,WACE,kBAAOC,QAAQ,SAAf,qBACA,kBACEC,KAAK,OACL/B,MAAOZ,EAAOD,OACdW,KAAK,SACLkC,SAAUpC,EACVuB,GAAG,eAGP,iBAAKS,UAAWC,EAAhB,WACE,kBAAOC,QAAQ,WAAf,uBACA,kBACEG,UAAQ,EACRR,aAAa,eACbM,KAAK,OACL/B,MAAOZ,EAAO8C,UAAY,GAC1BpC,KAAK,WACLkC,SAAUpC,EACVuB,GAAG,mBAIP,MACJ,iBAAKS,UAAWC,EAAhB,WACE,kBAAOC,QAAQ,QAAf,oBACA,kBACEG,UAAQ,EACRR,aAAa,eACbM,KAAK,QACL/B,MAAOZ,EAAOmC,OAAS,GACvBzB,KAAK,QACLkC,SAAUpC,EACVuB,GAAG,cAGP,iBAAKS,UAAWC,EAAhB,WACE,kBAAOC,QAAQ,WAAf,uBACA,kBACEG,UAAQ,EACRR,aAAa,eACbM,KAAK,WACL/B,MAAOZ,EAAO+C,UAAY,GAC1BrC,KAAK,WACLkC,SAAUpC,EACVuB,GAAG,iBAGP,gBAAKS,UAAWC,EAAhB,SACgB,WAAb5C,GACC,kBAAO8C,KAAK,SAAS/B,MAAM,aAE3B,kBAAO+B,KAAK,SAAS/B,MAAM,mB,qDC/HrC,MAA0B,yB,SCA1B,MCCe,YAA+C,IAAD,IAA3BoC,gBAAAA,OAA2B,MAAT,aAAS,EACzD,OACI,gBAAKC,QAAS,kBAAID,KAAmBR,UAAWC,M,0FCHxD,EAAyB,uBAAzB,EAAmE,iC,6BCAnE,MCMe,WACb,OACE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKS,IAAKC,EAAMC,IAAI,cACpB,SAACC,EAAA,EAAD,KACA,qCACA,SAACC,EAAA,EAAD,CAAYzD,SAAU,YACtB,mBAAO2C,UAAWC,EAAlB,yCAC6B,SAAC,KAAD,CAAMc,GAAG,UAAT,8B","sources":["webpack://edgeflix/./src/components/AccessForm/AccessForm.module.scss?8b2e","components/AccessForm/index.jsx","components/AccessForm/AccessForm.jsx","webpack://edgeflix/./src/components/Overlay/Overlay.module.scss?4844","components/Overlay/index.jsx","components/Overlay/Overlay.jsx","webpack://edgeflix/./src/pages/Signin/Signin.module.scss?e86f","pages/Signin/index.jsx","pages/Signin/Signin.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"AccessForm\":\"AccessForm_AccessForm__rMrwg\",\"AccessForm__inputGroup\":\"AccessForm_AccessForm__inputGroup__-EiD1\"};","import AccessForm from \"./AccessForm\";\nexport default AccessForm;","import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useUserContext } from \"../../Context/UserContext/UserProvider\";\n\nimport styles from \"./AccessForm.module.scss\";\n\nexport default function AccessForm({ sendData, formType }) {\n  const [values, setValues] = useState({\n    avatar: \"https://cdn-icons-png.flaticon.com/512/843/843331.png?w=740\",\n  });\n  const navigate = useNavigate();\n\n  const { users, fetchAllUsers } = useUserContext();\n\n  useEffect(() => {\n    fetchAllUsers();\n    //eslint-disable-next-line\n  }, []);\n\n  const onInputsChange = (e) => {\n    const name = e.target.name;\n    const value = e.target.value;\n\n    setValues((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const submitForm = (e) => {\n    e.preventDefault();\n    fetchAccess(values, formType);\n  };\n\n  const fetchAccess = async (values, requestType) => {\n    if (requestType === \"signup\") {\n      try {\n        const request = await fetch(\n          \"https://edgemony-backend.herokuapp.com/users\",\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify(values),\n          }\n        );\n        const response = await request.json();\n        if (request.status !== 201) {\n          throw new Error(response);\n        } else {\n          localStorage.setItem(\"JWT_accessToken\", response.accessToken);\n          localStorage.setItem(\"currentUser\", response.user.id);\n          navigate(\"/browse\");\n        }\n      } catch (e) {\n        alert(e);\n      }\n    } else {\n      const emailVerification = users.filter(\n        (user) => user.email === values.email\n      );\n      if (emailVerification.length) {\n        localStorage.setItem(\"currentUser\", emailVerification[0].id);\n        navigate(\"/browse\");\n      } else {\n        alert(\"Questa email non esiste, registrati!\");\n      }\n    }\n  };\n\n  return (\n    <form\n      autoComplete=\"false\"\n      onSubmit={submitForm}\n      className={styles.AccessForm}\n    >\n      {formType === \"signup\" ? (\n        <>\n          <div className={styles.AccessForm__inputGroup}>\n            <label htmlFor=\"avatar\">Avatar</label>\n            <input\n              type=\"text\"\n              value={values.avatar}\n              name=\"avatar\"\n              onChange={onInputsChange}\n              id=\"avatar\"\n            />\n          </div>\n          <div className={styles.AccessForm__inputGroup}>\n            <label htmlFor=\"username\">Username</label>\n            <input\n              required\n              autoComplete=\"new-password\"\n              type=\"text\"\n              value={values.username || \"\"}\n              name=\"username\"\n              onChange={onInputsChange}\n              id=\"username\"\n            />\n          </div>\n        </>\n      ) : null}\n      <div className={styles.AccessForm__inputGroup}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          required\n          autoComplete=\"new-password\"\n          type=\"email\"\n          value={values.email || \"\"}\n          name=\"email\"\n          onChange={onInputsChange}\n          id=\"email\"\n        />\n      </div>\n      <div className={styles.AccessForm__inputGroup}>\n        <label htmlFor=\"password\">Password</label>\n        <input\n          required\n          autoComplete=\"new-password\"\n          type=\"password\"\n          value={values.password || \"\"}\n          name=\"password\"\n          onChange={onInputsChange}\n          id=\"password\"\n        />\n      </div>\n      <div className={styles.AccessForm__inputGroup}>\n        {formType === \"signup\" ? (\n          <input type=\"submit\" value=\"Sign Up\" />\n        ) : (\n          <input type=\"submit\" value=\"Sign In\" />\n        )}\n      </div>\n    </form>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"Overlay_Overlay__QvtbA\"};","import Overlay from \"./Overlay\";\nexport default Overlay;","import styles from \"./Overlay.module.scss\"\n\nexport default function Overlay ({functionOnClick = ()=>{}}) {\n    return (\n        <div onClick={()=>functionOnClick()} className={styles.Overlay}></div>\n    )\n}","// extracted by mini-css-extract-plugin\nexport default {\"Signin\":\"Signin_Signin__g3QIx\",\"Signin__redirect\":\"Signin_Signin__redirect__NmHjX\"};","import Signin from \"./Signin\";\nexport default Signin;","import AccessForm from \"../../components/AccessForm\";\nimport Overlay from \"../../components/Overlay\";\n\nimport styles from \"./Signin.module.scss\";\nimport logo from \"./../../logo.png\";\nimport { Link } from \"react-router-dom\";\n\nexport default function Signin() {\n  return (\n    <div className={styles.Signin}>\n      <img src={logo} alt=\"Edgeflix\" />\n      <Overlay />\n      <h1>Sign In</h1>\n      <AccessForm formType={\"signin\"} />\n      <small className={styles.Signin__redirect}>\n        Non sei ancora registrato? <Link to=\"/signup\">Sign Up!</Link>\n      </small>\n    </div>\n  );\n}\n"],"names":["sendData","formType","useState","avatar","values","setValues","navigate","useNavigate","useUserContext","users","fetchAllUsers","useEffect","onInputsChange","e","name","target","value","prev","fetchAccess","requestType","fetch","method","headers","body","JSON","stringify","request","json","response","status","Error","localStorage","setItem","accessToken","user","id","alert","emailVerification","filter","email","length","autoComplete","onSubmit","preventDefault","className","styles","htmlFor","type","onChange","required","username","password","functionOnClick","onClick","src","logo","alt","Overlay","AccessForm","to"],"sourceRoot":""}